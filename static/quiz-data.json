[
    {
        "question": "What is the primary advantage of using recursion in programming?",
        "correct_answer": "Simplifies code by breaking down complex problems into simpler, repeatable tasks.",
        "options": [
            "Simplifies code by breaking down complex problems into simpler, repeatable tasks.",
            "Increases the speed of program execution.",
            "Reduces memory usage significantly.",
            "Ensures that programs are always bug-free."
        ],
        "explanation": "Recursion simplifies the code by allowing a function to call itself to solve smaller instances of the same problem, making it easier to manage and understand complex tasks."
    },
    {
        "question": "What is a base case in recursion?",
        "correct_answer": "The condition under which a recursive function stops calling itself.",
        "options": [
            "The condition under which a recursive function stops calling itself.",
            "The initial call made to a recursive function.",
            "A loop that continues indefinitely.",
            "A special kind of error that occurs in recursive functions."
        ],
        "explanation": "A base case is a condition that stops the recursion by not making any further calls to the recursive function, preventing infinite loops."
    },
    {
        "question": "Which of the following is NOT a common problem solved by recursion?",
        "correct_answer": "Compiling code.",
        "options": [
            "Compiling code.",
            "Calculating factorials.",
            "Solving the Towers of Hanoi.",
            "Performing a binary search."
        ],
        "explanation": "Compiling code is not typically solved using recursion, whereas the other options are classic examples of recursive problem solving."
    },
    {
        "question": "How does tail recursion differ from regular recursion?",
        "correct_answer": "In tail recursion, the recursive call is the last operation in the function.",
        "options": [
            "In tail recursion, the recursive call is the last operation in the function.",
            "In tail recursion, the function calls itself multiple times before returning.",
            "Tail recursion uses more memory than regular recursion.",
            "Tail recursion is used only for sorting algorithms."
        ],
        "explanation": "Tail recursion is a special case where the recursive call is the last operation, allowing optimizations that can improve performance."
    },
    {
        "question": "What can happen if a recursive function does not have a proper base case?",
        "correct_answer": "It can lead to infinite recursion and a stack overflow error.",
        "options": [
            "It can lead to infinite recursion and a stack overflow error.",
            "The program will run faster than expected.",
            "The function will compile but not execute.",
            "The function will automatically find a base case."
        ],
        "explanation": "Without a proper base case, the function will keep calling itself indefinitely, eventually causing a stack overflow error due to excessive memory usage."
    },
    {
        "question": "Which of the following is a characteristic of a recursive algorithm?",
        "correct_answer": "It solves a problem by solving smaller instances of the same problem.",
        "options": [
            "It solves a problem by solving smaller instances of the same problem.",
            "It always executes in constant time.",
            "It requires a large array to function.",
            "It can only be used with integer data types."
        ],
        "explanation": "Recursive algorithms break down a problem into smaller, more manageable instances, often using the same logic repeatedly."
    },
    {
        "question": "What is the purpose of the recursive stack in recursion?",
        "correct_answer": "To keep track of function calls and their return values.",
        "options": [
            "To keep track of function calls and their return values.",
            "To optimize the speed of the function.",
            "To store the input data for the function.",
            "To automatically resolve errors in the code."
        ],
        "explanation": "The recursive stack maintains a record of each function call and its state, allowing the program to return to the correct point after each recursive call finishes."
    },
    {
        "question": "Which of the following best describes mutual recursion?",
        "correct_answer": "When two or more functions call each other recursively.",
        "options": [
            "When two or more functions call each other recursively.",
            "When a function calls itself with different parameters.",
            "When a recursive function is used within a loop.",
            "When recursion is applied to mathematical functions only."
        ],
        "explanation": "Mutual recursion occurs when two or more functions are recursive and call each other in a cycle, rather than a function calling itself directly."
    },
    {
        "question": "In recursion, what is meant by \"divide and conquer\"?",
        "correct_answer": "A strategy that breaks a problem into smaller subproblems, solves them individually, and combines their results.",
        "options": [
            "A strategy that breaks a problem into smaller subproblems, solves them individually, and combines their results.",
            "A method that uses multiple recursive calls to solve a problem simultaneously.",
            "A way to split data into different arrays for processing.",
            "A technique that divides memory allocation among different functions."
        ],
        "explanation": "\"Divide and conquer\" in recursion involves dividing a problem into smaller parts, solving each part, and combining the results to solve the original problem."
    },
    {
        "question": "How can recursion be inefficient in some cases?",
        "correct_answer": "It can lead to high memory usage and slow execution if not optimized.",
        "options": [
            "It can lead to high memory usage and slow execution if not optimized.",
            "It always uses less memory than iterative solutions.",
            "It automatically optimizes itself during execution.",
            "Recursion is always more efficient than iteration."
        ],
        "explanation": "Recursion can lead to high memory usage due to the call stack and can be slow if each call involves significant overhead, especially without tail call optimization."
    }
]